.decl Device(x:symbol)

.decl Memory(x:symbol, y:float)

//.decl Util(x:symbol, y:float)  // CPU utilization

.decl Bandwidth(x:symbol, y:float)  // latencies

.input Device(IO=file, filename="workers.device", delimiter=",")

.input Memory(IO=file, filename="workers.memory", delimiter=",")

//.input Util(IO=file, filename="workers.util", delimiter=",")

.input Bandwidth(IO=file, filename="workers.bandwidth", delimiter=",")



.decl SplitLayer(x:number, w:number, z:symbol)



.decl Layers(a:number, b:number, c:float, d:float)

.decl SplitDevices(a:symbol, y:number, z:number, b:symbol, w:number, x:number, c:symbol, t:number, v:number)

.decl CheckUnique(a:number, b:number, c:number, d:number, e:number, f:number)

//.input Layers(IO=file, filename="workers.layers", delimiter=",")

//.input SplitDevices(IO=file, filename="workers.splitdevices", delimiter=",")

//.input CheckUnique(IO=file, filename="workers.checkunique", delimiter=",")



//

// workers: Device/Memory/Bandwidth

//



//

// model constraints

//

// TODO: Layers, CheckUnique, SplitDevices

// only SplitLayer is static



//// layers combination

//// Layers(layer start, layer end, bandwidth min, memory min)

//Layers(1,2,13.0,9.0).

//Layers(1,3,20.0,12.0).

//Layers(1,4,22.0,14.0).

//Layers(2,3,10.0,6.0).

//Layers(2,4,12.0,8.0).

//Layers(3,4,9.0,5.0).

//// a device can be assigned to one layer

//Layers(1,0,10.0,6.0).

//Layers(2,0,3.0,3.0).

//Layers(3,0,7.0,3.0).

//Layers(4,0,2.0,2.0).



// SplitLayer(layer start, layer end, device)

SplitLayer(0,0,k) :- Device(k).  // device k has no assignment

//SplitLayer(x,w,k) :- Device(k), Bandwidth(k,z), Memory(k,y), Util(k,u), Layers(x,w,i,a,c), a<=z, c<=y, i<=u.

SplitLayer(x,w,k) :- Device(k), Bandwidth(k,z), Memory(k,y), Layers(x,w,a,c), a<=z, c<=y.



//// currently need to specify all possible combinations

//// this can be done by a separate program 

//// arguments == number of workers/devices * 2 

//CheckUnique(a,b,c,d,e,f) :-

//  // some devices can be assigned no layers 

//  (a=1,b=2,c=3,d=4,e=0,f=0;a=1,b=3,c=4,d=0,e=0,f=0;a=1,b=0,c=2,d=4,e=0,f=0).  



//SplitDevices(a,y,z,b,w,x,c,t,v) :- 

//  // call SplitLayer for each possible device {a,b,c}

//  SplitLayer(y,z,a), 

//  SplitLayer(w,x,b), 

//  SplitLayer(t,v,c), 

//  // A device can only be assigned one time per execution

//  a!=b, b!=c, a!=c,

//  // All layers must be assigned but the same layer cannot be assigned to two devices

//  CheckUnique(y,z,w,x,t,v).



// output

.output SplitDevices
.decl CheckUnique(PIR:number,LYX:number,MGO:number,EGV:number,XJA:number,QGR:number,NET:number,WWI:number,DLP:number,KAS:number,SVA:number,BMN:number,HPC:number,QNX:number)
.decl SplitDevices(NMS:symbol,OUQ:number,WLB:number,IIL:symbol,FYZ:number,NRY:number,PXY:symbol,YZC:number,GUB:number,SHP:symbol,CBO:number,LQY:number,YGW:symbol,WCN:number,USA:number,STK:symbol,SVS:number,BLN:number,YCL:symbol,LCP:number,QMA:number)
CheckUnique(JFO,IUY,ISF,LJG,BDF,OTG,JID,UVB,XHC,XHS,WDJ,QSJ,BON,ZOC) :- (JFO=1,IUY=0,ISF=2,LJG=0,BDF=0,OTG=0,JID=0,UVB=0,XHC=0,XHS=0,WDJ=0,QSJ=0,BON=0,ZOC=0).
SplitDevices(OMR,DTO,ZHO,HHV,CKR,SCA,OAG,CSU,DDL,LOD,RNA,OQO,BCA,KIF,ZFI,UKT,MXE,FEI,XGN,PCM,ZUR) :- SplitLayer(DTO,ZHO,OMR),SplitLayer(CKR,SCA,HHV),SplitLayer(CSU,DDL,OAG),SplitLayer(RNA,OQO,LOD),SplitLayer(KIF,ZFI,BCA),SplitLayer(MXE,FEI,UKT),SplitLayer(PCM,ZUR,XGN),OMR!=HHV,OMR!=OAG,OMR!=LOD,OMR!=BCA,OMR!=UKT,OMR!=XGN,HHV!=OAG,HHV!=LOD,HHV!=BCA,HHV!=UKT,HHV!=XGN,OAG!=LOD,OAG!=BCA,OAG!=UKT,OAG!=XGN,LOD!=BCA,LOD!=UKT,LOD!=XGN,BCA!=UKT,BCA!=XGN,UKT!=XGN,CheckUnique(DTO,ZHO,CKR,SCA,CSU,DDL,RNA,OQO,KIF,ZFI,MXE,FEI,PCM,ZUR).