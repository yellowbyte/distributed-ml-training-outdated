.decl Device(x:symbol)
.decl Memory(x:symbol, y:number)
.decl Bandwidth(x:symbol, y:number)
.input Device(IO=file, filename="workers.device", delimiter=",")
.input Memory(IO=file, filename="workers.memory", delimiter=",")
.input Bandwidth(IO=file, filename="workers.bandwidth", delimiter=",")

.decl Layer(a:number, b:number, c:number, d:number)
.decl Layers(a:number, b:number, c:number, d:number, e:number)
.decl SplitLayer(x:number, w:number, z:symbol)
.decl SplitDevices(a:symbol, y:number, z:number, b:symbol, w:number, x:number, c:symbol, t:number, v:number)
.decl CheckUnique(a:number, b:number, c:number, d:number, e:number, f:number)

//Device("d1").
//Device("d2").
//Device("d3").

//Memory("d1", 10).
//Memory("d2", 30).
//Memory("d3", 36).

//Bandwidth("d1", 15).
//Bandwidth("d2", 31).
//Bandwidth("d3", 30).

// layer number, input size, output size, number of nodes
Layer(1, 10, 5, 6).
Layer(2, 3, 2, 3).
Layer(3, 7, 7, 3).
Layer(4, 2, 3, 2).

// layers combination
Layers(1,2,13,7,9).
Layers(1,3,20,14,12).
Layers(1,4,22,17,14).
Layers(2,3,10,9,6).
Layers(2,4,12,12,8).
Layers(3,4,9,10,5).
Layers(1,0,10,5,6).
Layers(2,0,3,2,3).
Layers(3,0,7,7,3).
Layers(4,0,2,3,2).

SplitLayer(0,0,k) :- Device(k).
SplitLayer(x,w,k) :- Device(k), Bandwidth(k,z), Memory(k,y), Layers(x,w,a,b,c), a<z, b<z, c<y.

// currently need to specify all possible combinations
// this can be done by a separate program 
CheckUnique(a,b,c,d,e,f) :-
  // some devices can be assigned no layers 
	(a=1,b=2,c=3,d=4,e=0,f=0;a=1,b=3,c=4,d=0,e=0,f=0).  

SplitDevices(a,y,z,b,w,x,c,t,v) :- 
	SplitLayer(y,z,a), 
	SplitLayer(w,x,b), 
	SplitLayer(t,v,c), 
  // A device can only be assigned one time per execution
  a!=b, b!=c, a!=c,
  // All layers must be assigned but the same layer cannot be assigned to two devices
  CheckUnique(y,z,w,x,t,v).

//.output SplitLayer
.output SplitDevices
